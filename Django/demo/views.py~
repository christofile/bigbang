# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.template import RequestContext
from datetime import datetime
from datetime import timedelta
from models import User
from models import order
from utils import config
from utils import common
import cache
import uuid
import forms
import json
import urllib
import hashlib
import os

# Index:demo lab introduction
def index(request):
    return render_to_response('index.htm')

# Create your views here.
# User Register
def register(request):
    if request.method == 'POST':
        # Submit form
        form = forms.RegisterForm(request.POST)
        if form.is_valid():
            register_date = datetime.now()
            # 保存用户信息
            user = User(
                email=form.cleaned_data['email'].strip(),
                password=encode_password(form.cleaned_data['password'].strip()),  # encode passowrd
                status='enabled',
                create_time=register_date,
		group='default',
		account='1')
            user.save()
            # 写登录session
            session_id = _do_login(user.email)
            return_url = _get_return_url(request)
            response = HttpResponseRedirect(return_url)
            response.set_cookie('id', session_id)
            return response
        else:
            return render_to_response('register.htm', {'form': form})

    else:
        # 渲染页面
        return_url = urllib.urlencode({'return_url': _get_return_url(request)})
        register_action_url = '/register/?' + return_url
        return render_to_response('register.htm', {'register_action_url': register_action_url})


# Login
def login(request):
    if request.method == 'POST':
        # 提交表单
        form = forms.LoginForm(request.POST)
        if form.is_valid():
            # 写登录session
            session_id = _do_login(form.cleaned_data['email'].strip())
            return_url = _get_return_url(request)
            response = HttpResponseRedirect(return_url)
            response.set_cookie('id', session_id)
            return response
        else:
            return render_to_response('login.htm', {'form': form})
    else:
        # 渲染页面
        return_url = urllib.urlencode({'return_url': _get_return_url(request)})
        login_action_url = '/login/?' + return_url
        return render_to_response('login.htm', {'login_action_url': login_action_url})

# Logout
def loginout(request):
    # del session
    session_id = request.COOKIES.get('id')
    if session_id:
        cache.del_login_session(session_id)

    return_url = _get_return_url(request)
    response = HttpResponseRedirect(return_url)
    # del cookie
    response.set_cookie('id', '', 0)
    return response


# Change password(require)
def change_password(request):
    if request.method == "POST":
        # 提交表单
        form = forms.ChangePasswordForm(request.POST)
        if form.is_valid():
            user_id = _get_current_userid(request)
            password = encode_password(form.cleaned_data['password'].strip())
            old_password = User.objects.get(id=user_id).password
            if password != old_password:
                # 密码错误
                form._errors["password"] = ErrorList([u"密码不正确!"])
                context = RequestContext(request, {'form': form})
                return render_to_response('change_password.htm', context)
            else:
                # 修改密码成功
                new_password = encode_password(form.cleaned_data['new_password'].strip())
                User.objects.filter(id=user_id).update(gmt_modify=datetime.now(), password=new_password)
                context = RequestContext(request, {'success': True})
                return render_to_response('change_password.htm', context)
        else:
            context = RequestContext(request, {'form': form})
            return render_to_response('change_password.htm', context)
    else:
        # 渲染页面
        context = RequestContext(request)
        return render_to_response('change_password.htm', context)

#Create order
def orderlab(request):
    if request.method == "POST":
	order_type = request.POST['labtype']
	order_day = request.POST['labdays']
	register_date = datetime.now()	
	end_date = register_date+timedelta(days=int(order_day))
	myorder = order(
   		   user_id=_get_current_userid(request),
		   account_id='1',
		   lab_id=order_type,
		   start_time=register_date,
		   end_time=end_date,
		   status='active',
		   mail_to_user='test'
		)
	myorder.save()
	# judge if a valid order is created, if so, provision lab
	os.system("python /tmp/ostest.py")
	context = RequestContext(request)
        return render_to_response('ordersuccess.htm', context)		
    else:
	# 渲染页面
        context = RequestContext(request)
        return render_to_response('option.htm', context)

#-------------------------------------------
# 内部接口
#-------------------------------------------
# 写登录session
def _do_login(email):
    user = User.objects.get(email=email)  # ignore exception
    data = {'id': user.id, 'email': email}
    id = common.unique_session_id()
    cache.set_login_session(id, data)
    return id


# 获取return_url(登录和注册时用）
def _get_return_url(request):
    return_url = request.GET.get('return_url', None)
    referer = request.META.get('HTTP_REFERER', None)

    if not return_url and referer:
        return_url = referer
    if not return_url or not _safe_return_url(return_url):
        return_url = config.get_config('LOGIN_RETURN_URL')  # default return url
    return '/orderlab'


# 校验return_url安全性
# 1. 空的return_url
# 2. 非本域名url TODO
# 3. 含有login或者register的return_url(防止死循环)
def _safe_return_url(return_url):
    if not return_url or not return_url.strip():
        return False
    elif return_url.find('login') != -1 or return_url.find('register') != -1:
        return False
    else:
        return True


# 检查用户登录态
def _check_login(request):
    return request.xmanuser['login']


# 获取当前登录用户的user_id(没有登录返回None)
def _get_current_userid(request):
    if request.xmanuser['login']:
        return request.xmanuser['id']


